import json
import numpy as np
from tensorflow.keras.models import model_from_json
from PIL import Image

# ——————————————————————————————
# 1) Load model architecture + weights
# ——————————————————————————————
with open('weight_files/emnist_model.json', 'r') as f:
    model = model_from_json(f.read())
# this weights file contains your best-model weights saved at the end of training
model.load_weights('weight_files/emnist_weights.weights.h5')

# ——————————————————————————————
# 2) Load the label→character mapping generated by tfds
# ——————————————————————————————
with open('weight_files/label_names.json', 'r') as f:
    label_names = json.load(f)
# label_names is a list of 47 strings, e.g. ['0','1',…,'9','A','B',…,'Z','a','b','d',…,'t']

# ——————————————————————————————
# 3) Preprocessing to match your training pipeline
# ——————————————————————————————
def preprocess_image(path: str) -> np.ndarray:
    """
    - loads a grayscale image from disk,
    - resizes to 28×28 with LANCZOS resampling,
    - scales to [0,1],
    - undoes the EMNIST rotation & flip,
    - returns an array of shape (1,28,28,1).
    """
    img = Image.open(path).convert('L')
    try:
        resample = Image.Resampling.LANCZOS
    except AttributeError:
        resample = Image.LANCZOS
    img = img.resize((28, 28), resample=resample)

    arr = np.array(img, dtype=np.float32) / 255.0
    # EMNIST TFDS images are stored rotated+flipped
    arr = np.transpose(arr)
    arr = np.fliplr(arr)
    return arr.reshape((1, 28, 28, 1))

# ——————————————————————————————
# 4) Single-image inference
# ——————————————————————————————
def predict_image(path: str):
    x = preprocess_image(path)
    probs = model.predict(x, verbose=0)       # shape (1,47)
    idx = int(np.argmax(probs, axis=1)[0])    # class index
    char = label_names[idx]                   # mapped character
    conf = float(probs[0, idx])               # softmax confidence
    return idx, char, conf

# ——————————————————————————————
# 5) Specify your test image here
# ——————————————————————————————
if __name__ == '__main__':
    img_path = 'test_imgs/y.jpg'  # ← change to your image file
    idx, char, conf = predict_image(img_path)
    print(f"Predicted class index: {idx}")
    print(f"Character label:      '{char}'")
    print(f"Confidence:           {conf:.3f}")
